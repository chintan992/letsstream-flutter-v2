// Mocks generated by Mockito 5.4.4 from annotations
// in lets_stream/test/test_utils.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i3;

import 'package:flutter/material.dart' as _i2;
import 'package:lets_stream/src/core/services/accessibility_service.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTextStyle_0 extends _i1.SmartFake implements _i2.TextStyle {
  _FakeTextStyle_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeWidget_1 extends _i1.SmartFake implements _i2.Widget {
  _FakeWidget_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeColor_2 extends _i1.SmartFake implements _i3.Color {
  _FakeColor_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AccessibilityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccessibilityService extends _i1.Mock
    implements _i4.AccessibilityService {
  MockAccessibilityService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAccessibilityEnabled => (super.noSuchMethod(
        Invocation.getter(#isAccessibilityEnabled),
        returnValue: false,
      ) as bool);

  @override
  double get textScaleFactor => (super.noSuchMethod(
        Invocation.getter(#textScaleFactor),
        returnValue: 0.0,
      ) as double);

  @override
  bool get isHighContrastEnabled => (super.noSuchMethod(
        Invocation.getter(#isHighContrastEnabled),
        returnValue: false,
      ) as bool);

  @override
  bool get isReduceMotionEnabled => (super.noSuchMethod(
        Invocation.getter(#isReduceMotionEnabled),
        returnValue: false,
      ) as bool);

  @override
  bool get isBoldTextEnabled => (super.noSuchMethod(
        Invocation.getter(#isBoldTextEnabled),
        returnValue: false,
      ) as bool);

  @override
  double getRecommendedTouchTargetSize(_i2.BuildContext? context) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecommendedTouchTargetSize,
          [context],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  _i2.TextStyle getAccessibleTextStyle(
    _i2.BuildContext? context,
    _i2.TextStyle? baseStyle, {
    bool? ensureMinimumSize = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAccessibleTextStyle,
          [
            context,
            baseStyle,
          ],
          {#ensureMinimumSize: ensureMinimumSize},
        ),
        returnValue: _FakeTextStyle_0(
          this,
          Invocation.method(
            #getAccessibleTextStyle,
            [
              context,
              baseStyle,
            ],
            {#ensureMinimumSize: ensureMinimumSize},
          ),
        ),
      ) as _i2.TextStyle);

  @override
  _i2.Widget buildAccessibleButton({
    required _i2.BuildContext? context,
    required _i2.Widget? child,
    required _i3.VoidCallback? onPressed,
    required String? label,
    String? hint,
    bool? enabled = true,
    _i2.FocusNode? focusNode,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #buildAccessibleButton,
          [],
          {
            #context: context,
            #child: child,
            #onPressed: onPressed,
            #label: label,
            #hint: hint,
            #enabled: enabled,
            #focusNode: focusNode,
          },
        ),
        returnValue: _FakeWidget_1(
          this,
          Invocation.method(
            #buildAccessibleButton,
            [],
            {
              #context: context,
              #child: child,
              #onPressed: onPressed,
              #label: label,
              #hint: hint,
              #enabled: enabled,
              #focusNode: focusNode,
            },
          ),
        ),
      ) as _i2.Widget);

  @override
  _i2.Widget buildAccessibleCard({
    required _i2.BuildContext? context,
    required _i2.Widget? child,
    required String? label,
    String? hint,
    _i3.VoidCallback? onTap,
    bool? selected = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #buildAccessibleCard,
          [],
          {
            #context: context,
            #child: child,
            #label: label,
            #hint: hint,
            #onTap: onTap,
            #selected: selected,
          },
        ),
        returnValue: _FakeWidget_1(
          this,
          Invocation.method(
            #buildAccessibleCard,
            [],
            {
              #context: context,
              #child: child,
              #label: label,
              #hint: hint,
              #onTap: onTap,
              #selected: selected,
            },
          ),
        ),
      ) as _i2.Widget);

  @override
  _i2.Widget buildAccessibleImage({
    required String? imageUrl,
    required String? altText,
    double? width,
    double? height,
    _i2.BoxFit? fit = _i2.BoxFit.cover,
    _i2.Widget? placeholder,
    _i2.Widget? errorWidget,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #buildAccessibleImage,
          [],
          {
            #imageUrl: imageUrl,
            #altText: altText,
            #width: width,
            #height: height,
            #fit: fit,
            #placeholder: placeholder,
            #errorWidget: errorWidget,
          },
        ),
        returnValue: _FakeWidget_1(
          this,
          Invocation.method(
            #buildAccessibleImage,
            [],
            {
              #imageUrl: imageUrl,
              #altText: altText,
              #width: width,
              #height: height,
              #fit: fit,
              #placeholder: placeholder,
              #errorWidget: errorWidget,
            },
          ),
        ),
      ) as _i2.Widget);

  @override
  _i2.Widget buildAccessibleListItem({
    required _i2.BuildContext? context,
    required _i2.Widget? child,
    required String? label,
    String? hint,
    _i3.VoidCallback? onTap,
    bool? selected = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #buildAccessibleListItem,
          [],
          {
            #context: context,
            #child: child,
            #label: label,
            #hint: hint,
            #onTap: onTap,
            #selected: selected,
          },
        ),
        returnValue: _FakeWidget_1(
          this,
          Invocation.method(
            #buildAccessibleListItem,
            [],
            {
              #context: context,
              #child: child,
              #label: label,
              #hint: hint,
              #onTap: onTap,
              #selected: selected,
            },
          ),
        ),
      ) as _i2.Widget);

  @override
  void announce(String? message) => super.noSuchMethod(
        Invocation.method(
          #announce,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Widget buildFocusIndicator({
    required _i2.BuildContext? context,
    required _i2.Widget? child,
    bool? showFocusRing = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #buildFocusIndicator,
          [],
          {
            #context: context,
            #child: child,
            #showFocusRing: showFocusRing,
          },
        ),
        returnValue: _FakeWidget_1(
          this,
          Invocation.method(
            #buildFocusIndicator,
            [],
            {
              #context: context,
              #child: child,
              #showFocusRing: showFocusRing,
            },
          ),
        ),
      ) as _i2.Widget);

  @override
  _i3.Color getAccessibleColor({
    required _i2.BuildContext? context,
    required _i3.Color? backgroundColor,
    bool? isOnBackground = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAccessibleColor,
          [],
          {
            #context: context,
            #backgroundColor: backgroundColor,
            #isOnBackground: isOnBackground,
          },
        ),
        returnValue: _FakeColor_2(
          this,
          Invocation.method(
            #getAccessibleColor,
            [],
            {
              #context: context,
              #backgroundColor: backgroundColor,
              #isOnBackground: isOnBackground,
            },
          ),
        ),
      ) as _i3.Color);
}
